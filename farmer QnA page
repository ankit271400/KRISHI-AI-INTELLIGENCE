import { useState } from 'react';
import { useMutation } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import { apiRequest } from '@/lib/queryClient';
import { Brain, HelpCircle, Lightbulb, BookOpen, DollarSign, CloudRain, Bug, Sprout } from 'lucide-react';

interface FarmerQAResponse {
  answer: string;
  confidence: number;
  sources: string[];
  relatedQuestions: string[];
  actionItems: string[];
  governmentSchemes?: string[];
}

const questionCategories = [
  { value: 'irrigation', label: 'ЁЯТз рд╕рд┐рдВрдЪрд╛рдИ', icon: CloudRain },
  { value: 'seeds', label: 'ЁЯМ▒ рдмреАрдЬ рдФрд░ рдХрд┐рд╕реНрдореЗрдВ', icon: Sprout },
  { value: 'weather', label: 'ЁЯМдя╕П рдореМрд╕рдо', icon: CloudRain },
  { value: 'market', label: 'ЁЯУК рдмрд╛рдЬрд╝рд╛рд░ рднрд╛рд╡', icon: DollarSign },
  { value: 'finance', label: 'ЁЯТ░ рд╡рд┐рддреНрддреАрдп рд╕рд╣рд╛рдпрддрд╛', icon: DollarSign },
  { value: 'pest', label: 'ЁЯРЫ рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг', icon: Bug },
  { value: 'soil', label: 'ЁЯМН рдорд┐рдЯреНрдЯреА рд╕реНрд╡рд╛рд╕реНрдереНрдп', icon: Sprout },
  { value: 'general', label: 'тЭУ рд╕рд╛рдорд╛рдиреНрдп', icon: HelpCircle }
];

const languages = [
  { value: 'hindi', label: 'ЁЯЗоЁЯЗ│ рд╣рд┐рдВрджреА' },
  { value: 'punjabi', label: 'ЁЯЗоЁЯЗ│ рикрй░риЬри╛римрйА' },
  { value: 'english', label: 'ЁЯЗ║ЁЯЗ╕ English' },
  { value: 'bengali', label: 'ЁЯЗоЁЯЗ│ ржмрж╛ржВрж▓рж╛' }
];

const commonQuestions = {
  hindi: [
    "рдЗрд╕ рдореМрд╕рдо рдореЗрдВ рдХреМрди рд╕реА рдлрд╕рд▓ рдЙрдЧрд╛рдКрдВ?",
    "рд╕рд┐рдВрдЪрд╛рдИ рдХрдм рдФрд░ рдХрд┐рддрдиреА рдХрд░реВрдВ?",
    "PM-KISAN рдпреЛрдЬрдирд╛ рдореЗрдВ рдХреИрд╕реЗ рдЖрд╡реЗрджрди рдХрд░реВрдВ?",
    "рдХрдкрд╛рд╕ рдореЗрдВ рдХреАрдбрд╝реЗ рд▓рдЧреЗ рд╣реИрдВ, рдХреНрдпрд╛ рдХрд░реВрдВ?",
    "рдЧреЗрд╣реВрдВ рдХрд╛ рднрд╛рд╡ рдХрдм рдмрдврд╝реЗрдЧрд╛?",
    "рдорд┐рдЯреНрдЯреА рдореЗрдВ рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдХреИрд╕реЗ рдмрдврд╝рд╛рдКрдВ?"
  ],
  english: [
    "Which crop should I grow this season?",
    "When and how much to irrigate?",
    "How to apply for PM-KISAN scheme?",
    "Cotton crop has pest attack, what to do?",
    "When will wheat prices increase?",
    "How to increase nitrogen in soil?"
  ]
};

export default function FarmerQAPage() {
  const [question, setQuestion] = useState('');
  const [selectedLanguage, setSelectedLanguage] = useState('hindi');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [context, setContext] = useState({
    cropType: '',
    location: '',
    season: '',
    farmSize: ''
  });
  const [response, setResponse] = useState<FarmerQAResponse | null>(null);

  const askQuestionMutation = useMutation({
    mutationFn: async (questionData: any) => {
      const response = await fetch('/api/farmer-qa', {
        method: 'POST',
        body: JSON.stringify(questionData),
        headers: { 'Content-Type': 'application/json' }
      });
      return response.json();
    },
    onSuccess: (data: any) => {
      setResponse(data.answer);
    }
  });

  const handleAskQuestion = () => {
    if (!question.trim()) return;

    const questionData = {
      question,
      language: selectedLanguage,
      category: selectedCategory || undefined,
      context: Object.keys(context).length > 0 ? context : undefined
    };

    askQuestionMutation.mutate(questionData);
  };

  const handleQuickQuestion = (quickQuestion: string) => {
    setQuestion(quickQuestion);
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 0.8) return 'text-green-600';
    if (confidence >= 0.6) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getConfidenceLabel = (confidence: number) => {
    if (confidence >= 0.8) return 'рдЙрдЪреНрдЪ рд╡рд┐рд╢реНрд╡рд╕рдиреАрдпрддрд╛';
    if (confidence >= 0.6) return 'рдордзреНрдпрдо рд╡рд┐рд╢реНрд╡рд╕рдиреАрдпрддрд╛';
    return 'рдХрдо рд╡рд┐рд╢реНрд╡рд╕рдиреАрдпрддрд╛';
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="text-center space-y-2">
        <h1 className="text-3xl font-bold text-green-800 dark:text-green-400">
          ЁЯза рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕рд╣рд╛рдпрдХ
        </h1>
        <p className="text-gray-600 dark:text-gray-300">
          рдЦреЗрддреА рд╕реЗ рдЬреБрдбрд╝реЗ рдХрд┐рд╕реА рднреА рд╕рд╡рд╛рд▓ рдХрд╛ рддреБрд░рдВрдд рдЬрд╡рд╛рдм рдкрд╛рдПрдВ - AI рдФрд░ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд╕рд╛рде
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Question Input Form */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Brain className="h-5 w-5 text-blue-600" />
                рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ
              </CardTitle>
              <CardDescription>
                рдЦреЗрддреА, рдмрд╛рдЬрд╝рд╛рд░, рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреБрдЫ рднреА рдкреВрдЫреЗрдВ
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Language Selection */}
              <div className="space-y-2">
                <Label>рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ</Label>
                <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
                  <SelectTrigger data-testid="select-language">
                    <SelectValue placeholder="рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ" />
                  </SelectTrigger>
                  <SelectContent>
                    {languages.map((lang) => (
                      <SelectItem key={lang.value} value={lang.value}>
                        {lang.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Category Selection */}
              <div className="space-y-2">
                <Label>рдкреНрд░рд╢реНрди рдХреА рд╢реНрд░реЗрдгреА (рд╡реИрдХрд▓реНрдкрд┐рдХ)</Label>
                <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                  <SelectTrigger data-testid="select-category">
                    <SelectValue placeholder="рд╢реНрд░реЗрдгреА рдЪреБрдиреЗрдВ" />
                  </SelectTrigger>
                  <SelectContent>
                    {questionCategories.map((category) => (
                      <SelectItem key={category.value} value={category.value}>
                        {category.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Context Information */}
              <div className="space-y-2">
                <Label>рдЕрддрд┐рд░рд┐рдХреНрдд рдЬрд╛рдирдХрд╛рд░реА (рд╡реИрдХрд▓реНрдкрд┐рдХ)</Label>
                <div className="grid grid-cols-2 gap-2">
                  <Input
                    placeholder="рдлрд╕рд▓ рдХрд╛ рдирд╛рдо"
                    value={context.cropType}
                    onChange={(e) => setContext(prev => ({ ...prev, cropType: e.target.value }))}
                    data-testid="input-crop-type"
                  />
                  <Input
                    placeholder="рд╕реНрдерд╛рди/рд░рд╛рдЬреНрдп"
                    value={context.location}
                    onChange={(e) => setContext(prev => ({ ...prev, location: e.target.value }))}
                    data-testid="input-location"
                  />
                  <Input
                    placeholder="рдореМрд╕рдо (рд░рдмреА/рдЦрд░реАрдл)"
                    value={context.season}
                    onChange={(e) => setContext(prev => ({ ...prev, season: e.target.value }))}
                    data-testid="input-season"
                  />
                  <Input
                    placeholder="рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░ (рдПрдХрдбрд╝)"
                    value={context.farmSize}
                    onChange={(e) => setContext(prev => ({ ...prev, farmSize: e.target.value }))}
                    data-testid="input-farm-size"
                  />
                </div>
              </div>

              {/* Question Input */}
              <div className="space-y-2">
                <Label htmlFor="question">рдЖрдкрдХрд╛ рдкреНрд░рд╢реНрди</Label>
                <Textarea
                  id="question"
                  placeholder="рдпрд╣рд╛рдБ рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рд▓рд┐рдЦреЗрдВ..."
                  rows={4}
                  value={question}
                  onChange={(e) => setQuestion(e.target.value)}
                  data-testid="textarea-question"
                />
              </div>

              <Button 
                onClick={handleAskQuestion}
                disabled={!question.trim() || askQuestionMutation.isPending}
                className="w-full bg-blue-600 hover:bg-blue-700"
                data-testid="button-ask-question"
              >
                {askQuestionMutation.isPending ? 'рдЬрд╡рд╛рдм рдорд┐рд▓ рд░рд╣рд╛ рд╣реИ...' : 'ЁЯФН рдЬрд╡рд╛рдм рдкрд╛рдПрдВ'}
              </Button>
            </CardContent>
          </Card>

          {/* Answer Display */}
          {response && (
            <Card className="mt-6">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span className="flex items-center gap-2">
                    <Lightbulb className="h-5 w-5 text-yellow-600" />
                    рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдХреА рд╕рд▓рд╛рд╣
                  </span>
                  <Badge variant={response.confidence >= 0.7 ? "default" : "secondary"}>
                    {getConfidenceLabel(response.confidence)}
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
                  <p className="text-green-800 dark:text-green-200 leading-relaxed">
                    {response.answer}
                  </p>
                </div>

                {/* Action Items */}
                {response.actionItems && response.actionItems.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2 flex items-center gap-2">
                      тЬЕ рддреБрд░рдВрдд рдХрд░рдиреЗ рдпреЛрдЧреНрдп рдХрд╛рд░реНрдп
                    </h4>
                    <ul className="space-y-1">
                      {response.actionItems.map((item, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <span className="text-green-600 font-bold">тАв</span>
                          <span className="text-sm">{item}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* Government Schemes */}
                {response.governmentSchemes && response.governmentSchemes.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2 flex items-center gap-2">
                      ЁЯПЫя╕П рд╕рдВрдмрдВрдзрд┐рдд рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ
                    </h4>
                    <div className="space-y-1">
                      {response.governmentSchemes.map((scheme, index) => (
                        <Badge key={index} variant="outline" className="mr-2 mb-1">
                          {scheme}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}

                {/* Related Questions */}
                {response.relatedQuestions && response.relatedQuestions.length > 0 && (
                  <div>
                    <h4 className="font-semibold mb-2">ЁЯФЧ рд╕рдВрдмрдВрдзрд┐рдд рдкреНрд░рд╢реНрди</h4>
                    <div className="space-y-1">
                      {response.relatedQuestions.map((relatedQ, index) => (
                        <Button
                          key={index}
                          variant="ghost"
                          size="sm"
                          onClick={() => handleQuickQuestion(relatedQ)}
                          className="text-left justify-start h-auto p-2 text-blue-600 hover:text-blue-800"
                          data-testid={`button-related-question-${index}`}
                        >
                          <HelpCircle className="h-3 w-3 mr-1 flex-shrink-0" />
                          {relatedQ}
                        </Button>
                      ))}
                    </div>
                  </div>
                )}

                {/* Sources */}
                <div className="text-xs text-gray-500 border-t pt-2">
                  <span className="font-semibold">рд╕реНрд░реЛрдд: </span>
                  {response.sources.join(', ')}
                </div>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Quick Questions Sidebar */}
        <div className="space-y-6">
          {/* Common Questions */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BookOpen className="h-5 w-5 text-purple-600" />
                рдЖрдо рд╕рд╡рд╛рд▓
              </CardTitle>
              <CardDescription>
                рдЕрдХреНрд╕рд░ рдкреВрдЫреЗ рдЬрд╛рдиреЗ рд╡рд╛рд▓реЗ рдкреНрд░рд╢реНрди
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-2">
              {commonQuestions[selectedLanguage as keyof typeof commonQuestions]?.map((commonQ, index) => (
                <Button
                  key={index}
                  variant="ghost"
                  size="sm"
                  onClick={() => handleQuickQuestion(commonQ)}
                  className="w-full text-left justify-start h-auto p-2 text-sm"
                  data-testid={`button-common-question-${index}`}
                >
                  <HelpCircle className="h-3 w-3 mr-2 flex-shrink-0" />
                  {commonQ}
                </Button>
              ))}
            </CardContent>
          </Card>

          {/* Category Quick Access */}
          <Card>
            <CardHeader>
              <CardTitle>ЁЯУБ рд╢реНрд░реЗрдгреА рдХреЗ рдЕрдиреБрд╕рд╛рд░</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              {questionCategories.map((category) => {
                const IconComponent = category.icon;
                return (
                  <Button
                    key={category.value}
                    variant="outline"
                    size="sm"
                    onClick={() => setSelectedCategory(category.value)}
                    className="w-full justify-start"
                    data-testid={`button-category-${category.value}`}
                  >
                    <IconComponent className="h-4 w-4 mr-2" />
                    {category.label}
                  </Button>
                );
              })}
            </CardContent>
          </Card>

          {/* Tips */}
          <Card>
            <CardHeader>
              <CardTitle className="text-yellow-700 dark:text-yellow-300">ЁЯТб рд╕реБрдЭрд╛рд╡</CardTitle>
            </CardHeader>
            <CardContent className="text-sm space-y-2">
              <p>тАв рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ</p>
              <p>тАв рдлрд╕рд▓ рдФрд░ рд╕реНрдерд╛рди рдХрд╛ рдирд╛рдо рдмрддрд╛рдПрдВ</p>
              <p>тАв рдореМрд╕рдо рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреЗрдВ</p>
              <p>тАв рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ</p>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
