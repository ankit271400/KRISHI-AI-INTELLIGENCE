import { useState, useEffect } from 'react';
import { Web3Service } from '@/lib/web3';
import { ContractService } from '@/lib/contracts';

export interface WalletState {
  isConnected: boolean;
  address: string | null;
  balance: string | null;
  chainId: number | null;
}

export function useWallet() {
  const [walletState, setWalletState] = useState<WalletState>({
    isConnected: false,
    address: null,
    balance: null,
    chainId: null,
  });
  
  const [isLoading, setIsLoading] = useState(false);
  const web3Service = Web3Service.getInstance();
  const contractService = ContractService.getInstance();

  useEffect(() => {
    checkWalletConnection();
    setupEventListeners();
  }, []);

  const checkWalletConnection = async () => {
    try {
      const state = await web3Service.getWalletState();
      setWalletState(state);
      
      if (state.isConnected) {
        await contractService.initialize();
      }
    } catch (error) {
      console.error('Failed to check wallet connection:', error);
    }
  };

  const setupEventListeners = () => {
    if (typeof window !== 'undefined' && window.ethereum) {
      window.ethereum.on('accountsChanged', (accounts: string[]) => {
        if (accounts.length === 0) {
          setWalletState({
            isConnected: false,
            address: null,
            balance: null,
            chainId: null,
          });
        } else {
          checkWalletConnection();
        }
      });

      window.ethereum.on('chainChanged', () => {
        checkWalletConnection();
      });
    }
  };

  const connectWallet = async () => {
    setIsLoading(true);
    try {
      const state = await web3Service.connectWallet();
      setWalletState(state);
      await contractService.initialize();
      return state;
    } catch (error) {
      console.error('Failed to connect wallet:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const disconnectWallet = () => {
    setWalletState({
      isConnected: false,
      address: null,
      balance: null,
      chainId: null,
    });
  };

  return {
    walletState,
    isLoading,
    connectWallet,
    disconnectWallet,
    checkWalletConnection
  };
}
