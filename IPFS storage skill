export class IPFSService {
  private static instance: IPFSService;
  private apiKey: string;

  constructor() {
    this.apiKey = import.meta.env.VITE_PINATA_API_KEY || '';
  }

  static getInstance(): IPFSService {
    if (!IPFSService.instance) {
      IPFSService.instance = new IPFSService();
    }
    return IPFSService.instance;
  }

  async uploadFile(file: File): Promise<string> {
    if (!this.apiKey) {
      console.warn('IPFS API key not configured');
      return `Qm${Math.random().toString(36).substr(2, 42)}`;
    }

    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('pinataMetadata', JSON.stringify({
        name: `krishi-ai-scan-${Date.now()}`,
        keyvalues: {
          service: 'krishi-ai',
          type: 'crop-scan'
        }
      }));

      const response = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
        },
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Failed to upload to IPFS');
      }

      const result = await response.json();
      return result.IpfsHash;
    } catch (error) {
      console.error('IPFS upload error:', error);
      throw error;
    }
  }

  async uploadJSON(data: any): Promise<string> {
    if (!this.apiKey) {
      return `Qm${Math.random().toString(36).substr(2, 42)}`;
    }

    try {
      const response = await fetch('https://api.pinata.cloud/pinning/pinJSONToIPFS', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify({
          pinataContent: data,
          pinataMetadata: {
            name: `krishi-ai-nft-metadata-${Date.now()}`,
            keyvalues: {
              service: 'krishi-ai',
              type: 'nft-metadata'
            }
          }
        }),
      });

      const result = await response.json();
      return result.IpfsHash;
    } catch (error) {
      console.error('IPFS JSON upload error:', error);
      throw error;
    }
  }

  getIPFSUrl(hash: string): string {
    return `https://gateway.pinata.cloud/ipfs/${hash}`;
  }

  // Create NFT metadata for crop scan
  async createNFTMetadata(scanData: any): Promise<string> {
    const metadata = {
      name: `KrishiAI Crop Scan #${scanData.id}`,
      description: `AI-powered crop health analysis for ${scanData.cropType}`,
      image: this.getIPFSUrl(scanData.ipfsHash),
      attributes: [
        {
          trait_type: "Crop Type",
          value: scanData.cropType
        },
        {
          trait_type: "Health Status", 
          value: scanData.healthStatus
        },
        {
          trait_type: "Confidence",
          value: scanData.confidence
        },
        {
          trait_type: "Location",
          value: scanData.location
        },
        {
          trait_type: "Scan Date",
          value: new Date(scanData.createdAt).toISOString().split('T')[0]
        }
      ],
      external_url: "https://krishiai.replit.app",
      background_color: "ffffff",
      animation_url: null
    };

    return await this.uploadJSON(metadata);
  }
}
